import { Bot, InputFile } from "grammy";
import { z } from "zod";
import { IAnalyzerSettings, TMyContext } from "#types/state.js";
import { logger } from "#core/logger.js";
import { IJobsRepository } from "#repositories/JobsRepository.js";
import { Job } from "#core/models/Job.js";
import {
    JobAnalyzerSettingsDB,
    JobWorkerLighthouseResult,
    jobWorkerResultSchema,
    JobWorkerSeoResult,
} from "#api/types.js"; // DTO –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

/**
 * –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
 */
export class JobService {
    private isPolling = false;
    private timerId: NodeJS.Timeout | null = null;

    constructor(
        private readonly bot: Bot<TMyContext>,
        private readonly jobsRepository: IJobsRepository,
        private readonly pollIntervalMs: number,
    ) {}

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –ø–æ–ª–ª–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.
     */
    public startPolling(): void {
        if (this.isPolling) {
            logger.warn("Job polling is already running.");
            return;
        }

        logger.info("Starting job polling...");
        this.isPolling = true;
        this.poll();
    }

    /**
     * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–∏–∫–ª –ø–æ–ª–ª–∏–Ω–≥–∞.
     */
    public stopPolling(): void {
        if (!this.isPolling) {
            logger.warn("Job polling is not running.");
            return;
        }

        logger.info("Stopping job polling...");
        this.isPolling = false;
        if (this.timerId) {
            clearTimeout(this.timerId);
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ü–∏–∫–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏.
     */
    private async poll(): Promise<void> {
        if (!this.isPolling) {
            return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –ø–æ–ª–ª–∏–Ω–≥ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        }

        try {
            logger.debug("Polling for ready jobs...");
            const readyJobs = await this.jobsRepository.findReady();
            logger.debug(`Found ${readyJobs.length} jobs to process.`);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            await Promise.all(readyJobs.map((job) => this.processJob(job)));
        } catch (error) {
            logger.error(error, "An error occurred during the polling cycle.");
        } finally {
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤—ã–∑–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
            if (this.isPolling) {
                this.timerId = setTimeout(
                    () => this.poll(),
                    this.pollIntervalMs,
                );
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å.
     */
    private async processJob(job: Job): Promise<void> {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏
            if (!job.result) {
                throw new Error(`Job ${job.jobId} has no result data.`);
            }
            if (job.status === "failed") {
                throw new Error(`Job ${job.jobId} has a failed status.`);
            }

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const messageText = this.formatResultMessage(job.result);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await this.bot.api.sendPhoto(
                job.userId,
                new InputFile(
                    Buffer.from(job.result.screenshot, "base64"),
                    "analysis.jpeg",
                ),
                { caption: messageText, parse_mode: "HTML" },
            );

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –±–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å

            let brokenLinksText = "";
            if (job.result.seo?.brokenLinks?.length) {
                brokenLinksText = `–ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏:\n${job.result.seo.brokenLinks.map((link) => `- ${link.url}`).join("\n")}`;
                await this.bot.api.sendMessage(job.userId, brokenLinksText);
            }

            // –ü–æ–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π
            await this.jobsRepository.updateStatus(job.jobId);
            logger.info(
                `Successfully processed and sent job ${job.jobId} to user ${job.userId}.`,
            );
        } catch (error) {
            logger.error(error, `Failed to process job ${job.jobId}.`);
            // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ 'failed'
            if (job.userId) {
                await this.bot.api.sendMessage(
                    job.userId,
                    "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
                );
                await this.jobsRepository.updateStatus(
                    job.jobId,
                    // "failed",
                    // (error as Error).message,
                );
            }
        }
    }

    public async createNewJob(data: {
        userId: number;
        url: string;
        analyzerSettings: IAnalyzerSettings;
    }): Promise<Job> {
        logger.info(
            `User ${data.userId} requested a new job for URL: ${data.url}`,
        );

        // TODO:
        // - –¢–∏–ø—ã –∑–∞–¥–∞—á, –≥–ª—É–±–∏–Ω–∞
        // - –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–ª–∞–Ω—Å
        // - –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –ª–∏ –æ–Ω —Ç–∞–∫—É—é –∂–µ –∑–∞–¥–∞—á—É 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥
        // - –°–ø–∏—Å–∞–Ω–∏–µ –¥–µ–Ω–µ–≥

        const jobDataForRepo = {
            userId: data.userId,
            url: data.url,
            type: 1,
            settings: {
                depth: 1, // TODO: depth
                seo: data.analyzerSettings.seo,
                lighthouse: data.analyzerSettings.lighthouse,
                links: data.analyzerSettings.links,
                techstack: data.analyzerSettings.techstack
            }
        }

        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        const createdJob = await this.jobsRepository.createJob(jobDataForRepo);

        return createdJob;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ HTML-—Å–æ–æ–±—â–µ–Ω–∏–µ.
     */
    private formatResultMessage(
        result: z.infer<typeof jobWorkerResultSchema>,
    ): string {

        const seoBlock = result.seo ? this.formatSeoResult(result.seo) : `
üîé <b>SEO-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
 - <code>–ê–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è</code>
`;

        const lighthouseBlock = result.lighthouse
            ? this.formatLighthouseResult(result.lighthouse)
            : `
‚ö°Ô∏è <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (Lighthouse):</b>
 - <code>–ê–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è</code>
`;
        let techStackBlock = `üíª <b>–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:</b>
 - <code>–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</code>
`;

        if (result.techStack && result.techStack.length > 0) {
            techStackBlock = `üíª <b>–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:</b>
${result.techStack.map((tech) => ` - <code>${this.escapeHtml(tech)}</code>`).join("\n")}
`;
        }

        return `
<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞:</b>
${seoBlock}
ü§ñ <b>–§–∞–π–ª robots.txt:</b>
 - –°—Ç–∞—Ç—É—Å: <code>${result.robotsTxtExists ? "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</code>
${lighthouseBlock}
${techStackBlock}
 `;
    }

    private formatLighthouseResult(
        lighthouse: JobWorkerLighthouseResult,
    ): string {
        // –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        const formatScore = (score: number | null) => {
            if (score === null) return "<code>N/A</code>";
            const percent = (score * 100).toFixed(0);
            const emoji = score >= 0.9 ? "üü¢" : score >= 0.5 ? "üü°" : "üî¥";
            return `${emoji} <code>${percent}%</code>`;
        };

        const formatLCP = (ms: number | null) => {
            if (ms === null) return "<code>N/A</code>";
            const seconds = (ms / 1000).toFixed(2);
            const emoji = ms <= 2500 ? "üü¢" : ms <= 4000 ? "üü°" : "üî¥";
            return `${emoji} <code>${seconds} —Å</code>`;
        };

        const formatCLS = (score: number | null) => {
            if (score === null) return "<code>N/A</code>";
            const formatted = score.toFixed(3);
            const emoji = score <= 0.1 ? "üü¢" : score <= 0.25 ? "üü°" : "üî¥";
            return `${emoji} <code>${formatted}</code>`;
        };

        const formatTBT = (ms: number | null) => {
            if (ms === null) return "<code>N/A</code>";
            const emoji = ms <= 200 ? "üü¢" : ms <= 600 ? "üü°" : "üî¥";
            return `${emoji} <code>${ms.toFixed(0)} –º—Å</code>`;
        };

        return `
‚ö°Ô∏è <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (Lighthouse):</b>
 - Performance: ${formatScore(lighthouse.performance)}
 - Accessibility: ${formatScore(lighthouse.accessibility)}
 - Best Practices: ${formatScore(lighthouse.bestPractices)}
 - SEO: ${formatScore(lighthouse.seo)}

üìà <b>Core Web Vitals:</b>
 - LCP (–ó–∞–≥—Ä—É–∑–∫–∞): ${formatLCP(lighthouse.lcp)}
 - CLS (–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å): ${formatCLS(lighthouse.cls)}
 - TBT (–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å): ${formatTBT(lighthouse.tbt)}
`;
    }

    private formatSeoResult(seo: JobWorkerSeoResult): string {
        if (!seo) {
            return "";
        }

        const title = seo.title ? this.escapeHtml(seo.title) : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω";
        const description = seo.description
            ? this.escapeHtml(seo.description)
            : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ";
        const h1 = seo.h1 ? this.escapeHtml(seo.h1) : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω";
        const brokenLinks = seo.brokenLinks?.length ? seo.brokenLinks?.length : '–ê–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è';

        return `
üîé <b>SEO-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
 - title: <code>${title}</code>
 - description: <code>${description}</code>
 - –ó–∞–≥–æ–ª–æ–≤–æ–∫ H1: <code>${h1}</code>
 - –ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: <code>${brokenLinks}</code>
`;
    }

    private escapeHtml(text: string): string {
        return text
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }
}
