import { Bot, InputFile } from "grammy";
import { apiService } from "./ApiService";
import { JobsReadyDTO, jobWorkerResultSchema, TMyContext } from "./types";
import { logger } from "./logger";

function getProcessJob(bot: Bot<TMyContext>) {
    return async function processJob(jobReady: JobsReadyDTO[number]) {        
        const job = await apiService.getJob(jobReady.jobId);
        
        let error = false
        
        if (typeof job?.result !== "string") {
            if (!job) {
                logger.fatal("No job found by readyJob.id");
                return;
            }
            logger.fatal("No job result found");
            error = true
        }
        
        if(job.status === "failed") {
            logger.fatal("Job status FAILED")
            error = true
        }
        
        if (error && job.userId) {
            await bot.api.sendMessage(
                job.userId,
                "–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.",
            );
            throw new Error(`unknown error`);
        }


        const jobResult = jobWorkerResultSchema.parse(JSON.parse(job.result));

        const messageText = `
<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã SEO-–∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞:</b>

üîó <b>–°—Å—ã–ª–∫–∏:</b>
 - –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: <code>${jobResult.seo.linksCount}</code>
 - –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö: <code>${jobResult.seo.internalLinks}</code>
 - –í–Ω–µ—à–Ω–∏—Ö: <code>${jobResult.seo.externalLinks}</code>
 - –ë–∏—Ç—ã—Ö —Å—Å—ã–ª–æ–∫: <code>${jobResult.brokenLinks.length}</code>

üîé <b>SEO-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
 - title: <code>${jobResult.seo.title ? jobResult.seo.title : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"}</code>
 - description: <code>${jobResult.seo.description ? jobResult.seo.description : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ"}</code>
 - –ó–∞–≥–æ–ª–æ–≤–æ–∫ H1: <code>${jobResult.seo.h1 ? jobResult.seo.h1 : "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"}</code>

ü§ñ <b>–§–∞–π–ª robots.txt:</b>
 - –°—Ç–∞—Ç—É—Å: <code>${jobResult.seo.robotsTxtExists ? "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" : "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}</code>

`;

        await bot.api.sendPhoto(
            job.userId,
            new InputFile(
                Buffer.from(jobResult.screenshot, "base64"),
                "photo.jpeg",
            ),
            {
                caption: messageText,
                parse_mode: "HTML",
            },
        );
        if(jobResult.brokenLinks.length) {
            await bot.api.sendMessage(job.userId, `–ë–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏:\n${jobResult.brokenLinks.reduce((a,b) => a+"\n"+b.url, "")}`);
        }

        await apiService.markJobAsSent(job.jobId);
    };
}

export async function pollApi(
    bot: Bot<TMyContext>,
    interval: number,
): Promise<void> {
    logger.debug("Polled API!");
    try {
        const result = await apiService.getJobsDone();
        const processJob = getProcessJob(bot);

        await Promise.all(result.map(processJob));
    } catch (error) {
        logger.error(error, "Polling failed!");
    }

    setTimeout(() => pollApi(bot, interval), interval);
}
